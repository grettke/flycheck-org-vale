#+title: Design

* About

FlycheckOrgVale is a simplistic Flycheck checker.

It attempts to make it easy for 99% of users to use without any configuration.

So much so that there are no options.

The checker is implemented in 24 lines and the formatter is implemented in 6 lines for a total of 30 lines of code and it works fine.

The best way to customize this code is to copy and paste it into your own approach.

*Note*: =it= or =this= always refers to this software package

* Linting

This plugin:

- Formats Vale's output using a custom template
- Imports it into Flycheck

[[https://vale.sh/manual/output][Here is an explanation]] of how the process works.

** Vale Template Variables

Use its custom template like this with a fully-qualified path (path expansion doesn't work: not sure why not):

#+begin_src sh
vale --output=/Users/grant/src/flycheck-org-vale/flycheck-org-vale.tmpl DESIGN.org  | tail
#+end_src

The templates are written in [[https://pkg.go.dev/text/template][Go text/template]]s.

Vale [[https://vale.sh/docs/integrations/guide/#json-output-of-checks][provides the following template variables]]

- Action :: An action or change to the text that Vale server can take with a rule, containing a Name for the action and Params passed to the action.
- Check :: The rule set and rule triggered.
- Description :: A more detailed explanation for a rule. You can use it with custom output format or an editor integrationâ€™s UI.
- Line :: The line that contains the error.
- Link :: Link to explanation of style guide rule
- Message :: Help text output by the rule
- Severity :: The error level.
- Span :: The start and finish characters on the line.
- Match :: The text matched.

Example provided in JSON format:

#+begin_src json
{
  "index.md": [
    {
      "Action": {
        "Name": "",
        "Params": null
      },
      "Check": "write-good.Passive",
      "Description": "",
      "Line": 6,
      "Link": "",
      "Message": "'was created' may be passive voice. Use active voice if you can.",
      "Severity": "warning",
      "Span": [
        59,
        69
      ],
      "Match": "was created"
    },
  ]
}
#+end_src

The variables appear in [[https://github.com/errata-ai/vale/blob/v2/internal/check/definition.go][definition.go]] and don't appear to be documented. Their understanding isn't required to use the templates. In case they are helpful though they are defined around here:

- The rule definition:  [[https://github.com/errata-ai/vale/blob/v2/internal/check/definition.go#L24][type Definition struct]]
- How they are made: [[https://github.com/errata-ai/vale/blob/v2/internal/check/definition.go#L132][func makeAlert]]
- Their types, the context for the rules: [[https://github.com/errata-ai/vale/blob/v2/internal/check/definition.go#L85][func buildRule]]

* Justifications

** License

Why does it use the [[file:LICENSE][GNU GENERAL PUBLIC LICENSE Version 3]]?

- User Goals:
  - Easy to obtain
  - Easy to modify and redistribute
- Design Logic:
  - [[https://melpa.org/#/][MELPA]] is the dominant package distribution system and it requires packages to use the [[file:LICENSE][GNU GENERAL PUBLIC LICENSE Version 3]]
  - Most developers want an open source license and specifically GPLv3 which is a license [[https://opensource.org/licenses/GPL-3.0][approved by the open source]]

** Package Name

Why does it use the package name =flycheck-org-vale=?

- What should the name start with?
  - Around [[https://melpa.org/#/?q=flycheck][100]] packages on MELPA are =flycheck= related
  - Only about 10 of them /don't/ start with =flycheck=
  - Therefore the first word is =flycheck=
- Most of the remaining name suffixes (after =flycheck=) either have one word, the =linter= used, or the content =type= linted, or a combination of both separated by a dash
- This content type is =org=
- This linter is =vale=
- Should the suffix be one or two words?
  - Vale lints many files types
  - This package only support =org=
  - Therefore use two words
- In what order should the words appear: =content= that is =linted= or =linter= for =content=?
  - Reading from left to right in order of broader to more granular details follows most [[https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html][software]] and [[https://www.iso.org/iso-8601-date-and-time-format.html][time]] conventions
  - The constant ~flycheck-checkers~ in [[https://github.com/flycheck/flycheck/blob/master/flycheck.el][flycheck.el]] demonstrates for example with =python=, =ruby=, and =sh= that the broad to granular order is common within the package itself
  - This addresses all of =org= narrowed down to one =linter= for which there are others
  - Therefore the last two words should be =org-vale=

** Software Type

Why is it a library?

- Modes:
  - "[[Emacs][Emacs]] contains many editing modes that alter its basic behavior in useful ways."
  - Major Modes: "[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html][Every buffer]] possesses a major mode, which determines the editing behavior of Emacs while that buffer is current"
  - Minor Modes: "[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html][A minor mode]] is an optional editing mode that alters the behavior of Emacs in some well-defined way."
- Software:
  - "[[https://en.wikipedia.org/wiki/Library_(computing)][A library]] is also a collection of implementations of behavior, written in terms of a language, that has a well-defined interface by which the behavior is invoked."
  - Flycheck uses [[https://www.flycheck.org/en/latest/developer/developing.html][extension libraries]] to add support for linters
- Therefore this is a library providing a linter through Flycheck

** Mode Support

It is a package with a syntax checker.

It doesn't add any special functionality so neither a major nor minor mode is required

** Output Format

It exports a single line.

It is easier to understand and similar to the default =CLI= output.

=JSON= output is necessary and a pre-optimization.

** Vale Executable

The executable name is not configurable: it is the first =value= in the path.

This is the most likely name for 99% of the users.

Anyone using it out of the path or with another name will easily
be able to update their path accordingly or use a symbolic link for
the program name.

** Vale INI

The Vale INI file location is not configurable: it uses the default Vale behavior.

Once you understand the default Vale behavior you have multiple options for ini utilization.

You can use symbolic links to customize it further.

